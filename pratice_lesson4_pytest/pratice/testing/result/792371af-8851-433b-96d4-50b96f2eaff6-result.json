{"name": "test_add[get_datas85]", "status": "failed", "statusDetails": {"message": "AssertionError: assert 0.5 == 0.6\n  +0.5\n  -0.6", "trace": "self = <pratice_lesson4.pratice.testing.test_calc_new.TestCalculator object at 0x0000023D656B10A0>\nget_calc = <pratice_lesson4.pratice.demo.calc.Calculator object at 0x0000023D656052E0>, get_datas = [0.1, 0.4, 0.6]\n\n    @allure.story(\"计算器的加法测试\")\n    def test_add(self,get_calc,get_datas):\n        #调用add方法\n        with allure.step(\"从计算器的加方法中得到加过的值\"):\n            result = get_calc.add(get_datas[0],get_datas[1])\n        #假设最大能输入999999999\n        if result>=1000000000:\n            print(\"超出最大数值999999999，不允许输出\")\n            assert False\n        # 假设最小能输入-999999999\n        elif result<=-1000000000:\n            print(\"超出最小数值-999999999，不允许输出\")\n            assert False\n        else:\n            if isinstance(result, float):\n                # 浮点型的计算，是二进制运算，可能会丢位，所以可以使用round方法处理浮点数，强制保留2位数\n                result = round(result, 2)\n            #断言判断\n>           assert result == get_datas[2]\nE           assert 0.5 == 0.6\nE             +0.5\nE             -0.6\n\ntest_calc_new.py:58: AssertionError"}, "steps": [{"name": "从计算器的加方法中得到加过的值", "status": "passed", "start": 1612262377414, "stop": 1612262377414}], "parameters": [{"name": "get_datas", "value": "[0.1, 0.4, 0.6]"}], "start": 1612262377414, "stop": 1612262377414, "uuid": "cc91c49d-ff24-4e64-8b75-d6cfc73535c2", "historyId": "8c888f65ed67f134b305e0b855745379", "testCaseId": "3d63d6b6e535a2d30dc56b2e66da2d0a", "fullName": "test_calc_new.TestCalculator#test_add", "labels": [{"name": "feature", "value": "测试计算器"}, {"name": "story", "value": "计算器的加法测试"}, {"name": "suite", "value": "test_calc_new"}, {"name": "subSuite", "value": "TestCalculator"}, {"name": "host", "value": "Naraku15"}, {"name": "thread", "value": "18708-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_calc_new"}]}